#include<iostream>
#include <algorithm>
using namespace std;
const int n = 4;
const int m = 4;
const int p = 4;
int main(){
	int matrixA[n][m];
	int matrixB[m][p];
	int matrixC[n][p];
	int matrixD[n][p];
	int m1, m2, m3, m4, m5, m6, m7;

	for (int i = 0; i < n; i++){
		for (int j = 0; j < m; j++){
			matrixA[i][j] = i + 3;
			matrixB[i][j] = i + 4;
			matrixC[i][j] = 0;
			matrixD[i][j] = 0;
		}
	}

	//matrix multi[lication simply
	/*cout << "simple multiplying\n";
	for (int i = 0; i < n; i++){
	for (int j = 0; j < m; j++){
	for (int k = 0; k < p; k++){
	matrixC[i][j] = matrixC[i][j] + (matrixB[k][j] * matrixA[i][k]);
	cout << matrixC[i][j] << endl;
	}
	}
	}*/
	//strassen algorithm
	cout << "using strassen algorithm multiplying\n";
	int a[2] = {0, 0};
	for (int i = 0, j = 0; i <= n + 1 && j<=m+1;){
		m1 = (matrixA[i][j] + matrixA[i+1][j+1])*(matrixB[i][j] + matrixB[i+1][j+1]);
		m2 = (matrixA[i+1][j] + matrixA[i+1][j+1])*matrixB[i][j];
		m3 = matrixA[i][j] * (matrixB[i][j+1] - matrixB[i+1][j+1]);
		m4 = matrixA[i+1][j+1] * (matrixB[i+1][j] - matrixB[i][j]);
		m5 = (matrixA[i][j] + matrixA[i][j+1])*matrixB[i+1][j+1];
		m6 = (matrixA[i+1][j] - matrixA[i][j])*(matrixB[i][j] + matrixB[i][j+1]);
		m7 = (matrixA[i][j+1] - matrixA[i+1][j+1])*(matrixB[i+1][j] + matrixB[i+1][j+1]);

		matrixD[i][j] = m1 + m4 - m5 + m7;
		matrixD[i][j+1] = m3 + m5;
		matrixD[i+1][j] = m2 + m4;
		matrixD[i+1][j+1] = m1 - m2 + m3 + m6;

		if (a[0] == 0 && a[0]==0){
			a[0]=a[0]+2;
			i = i + 2;
		}
		if (a[0] == 1){
			a[0]--;
			j = j + 2;
		}

	}
	for (int i = 0; i < n; i++){
		int j = 0;
		cout << matrixD[i][j] << matrixD[i][j+1] << matrixD[i][j+2] << matrixD[i][j+3] << endl;
	}
	system("PAUSE");
	return 0;

}
